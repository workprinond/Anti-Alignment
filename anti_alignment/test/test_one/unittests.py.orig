import os
import unittest

from pm4py.objects.petri.importer import factory  as petri_importer
from pm4py.objects.log.importer.xes import factory as xes_importer
from pm4py.objects.petri import utils
from pm4py.objects.petri.petrinet import PetriNet, Marking
import sys
import warnings

import warnings
warnings.filterwarnings("ignore")

sys.path.insert(1, '')  # path where the project is when no IDE is used
from anti_alignment.quality_dimensions.quality_dimension_factory import Quality_dimension_factory


class PaperExample(unittest.TestCase):
    # Constructing the Petri Net from
    log = xes_importer.import_log(os.path.join("paper_log.xes"))

    net1, im1, fm1 = petri_importer.apply("fig1.pnml")
    #x=generalization.apply(log, net1, im1, fm1)
    net2, im2, fm2 = petri_importer.apply("fig2.pnml")
    net3, im3, fm3 = petri_importer.apply("fig3.pnml")
    net4, im4, fm4 = petri_importer.apply("fig4.pnml")
    net5, im5, fm5 = petri_importer.apply("fig5.pnml")
    net6, im6, fm6 = petri_importer.apply("fig6.pnml")
    net7, im7, fm7 = petri_importer.apply("fig7.pnml")
    net8, im8, fm8 = petri_importer.apply("fig8.pnml")

<<<<<<< HEAD
#3std

##    precision tests
#    def test_precision_figure1(self):
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net1, self.im1, self.fm1).apply(alpha_generalization=None), 0.871, places=3)
#
=======
    #precision tests
#    def test_precision_figure1(self):
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net1, self.im1, self.fm1).apply(alpha_generalization=None), 0.871, places=3)

>>>>>>> 3498ca5363f92e3ce4648644c03d3e048f5cb7ab
#    def test_precision_figure2(self):
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net2, self.im2, self.fm2).apply(alpha_generalization=None), 1.000, places=3)
#
#    def test_precision_figure5(self): #AssertionError: 0.8714285714285714 != 0.8 within 3 places (0.0714285714285714 difference)
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net5, self.im5, self.fm5).apply(alpha_generalization=None), 0.800, places=3)


#    def test_precision_figure6(self): #AssertionError: 0.6184981684981685 != 0.588 within 3 places
#        fac=Quality_dimension_factory(self.log, self.net6, self.im6, self.fm6)
#        fac.compute_alignments_of_length()
#        self.assertAlmostEqual(fac.apply(alpha_generalization=None), 0.588, places=3)

##
    def test_precision_figure8(self): #Problem: State space of Reachbility graph
        fac=Quality_dimension_factory(self.log, self.net8, self.im8, self.fm8)
        fac.compute_alignments_of_length()
        self.assertAlmostEqual(fac.apply(alpha_generalization=None), 0.033, places=3)

#
#    #generalisation_tests
#    def test_generalization_figure1(self):
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net1, self.im1, self.fm1).apply(alpha_precision=None), 0.206, places=3)
<<<<<<< HEAD
=======


#    def test_generalization_figure2(self):
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net2, self.im2, self.fm2).apply(alpha_precision=None), 0.000, places=3)

#    def test_generalization_figure5(self): #AssertionError: 0.21966606638348743 != 0.225 within 3 places (0.005333933616512576 difference)
#        self.assertAlmostEqual(generalization.apply(self.log, self.net5, self.im5, self.fm5), 0.225, places=3)
>>>>>>> 3498ca5363f92e3ce4648644c03d3e048f5cb7ab
#
##
#    def test_generalization_figure2(self):
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net2, self.im2, self.fm2).apply(alpha_precision=None), 0.000, places=3)
#
#    def test_generalization_figure5(self): #AssertionError: 0.21966606638348743 != 0.225 within 3 places (0.005333933616512576 difference)
#        self.assertAlmostEqual(Quality_dimension_factory(self.log, self.net5, self.im5, self.fm5).apply(alpha_precision=None), 0.225, places=3)

#    def test_generalization_figure6(self): #AssertionError: 0.4523766057644475 != 0.466 within 3 places
#        fac=Quality_dimension_factory(self.log, self.net6, self.im6, self.fm6)
#        fac.compute_alignments_of_length()
#        self.assertAlmostEqual(fac.apply(alpha_precision=None), 0.466, places=3)
#
    def test_generalization_figure8(self): #Problem: State space of Reachbility graph
        fac=Quality_dimension_factory(self.log, self.net8, self.im8, self.fm8)
        fac.compute_alignments_of_length()
        self.assertAlmostEqual(fac.apply(alpha_precision=None), 0.459, places=3)

#    def test_precision_figure3(self):
#        self.assertAlmostEqual(precision.apply(self.log, self.net3, self.im3, self.fm3), 0.000,places=3)
    def test_only_one_variant(self):
        log_only_one_variant=xes_importer.import_log(os.path.join("only_one_variant.xes"))
        self.assertAlmostEqual(Quality_dimension_factory(log_only_one_variant, self.net2, self.im2, self.fm2).apply(alpha_generalization=None), 1.000, places=3)


if __name__ == '__main__':
    unittest.main()
